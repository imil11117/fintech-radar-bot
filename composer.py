import re

def _pro_notes(post: dict):
    text = f"{post.get('name','')} {post.get('tagline','')} {post.get('description','')}".lower()
    payment = any(k in text for k in ["payment","checkout","acquiring","pay in","card","pos","invoice","billing"])
    kyc     = any(k in text for k in ["kyc","aml","onboarding","identity","fraud","verification"])
    smb     = any(k in text for k in ["smb","invoic","accounting","bookkeep","erp","cash flow"])
    crypto  = any(k in text for k in ["crypto","defi","web3","wallet","token","onchain"])

    if payment:
        comp, integ, monet, risk, pilot = (
            "PCI DSS; –≤–æ–∑–º–æ–∂–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è MSB/MTL (US)",
            "Stripe/Adyen/Rapyd; Plaid/Open Banking",
            "take-rate 10‚Äì50 bps",
            "chargebacks, fraud",
            "e-commerce/–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã (MX)",
        )
    elif kyc:
        comp, integ, monet, risk, pilot = (
            "AML/KYC, —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏; —Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "Trulioo/Sumsub/Persona",
            "per-verification",
            "false positives, –ø—Ä–æ—Å–∞–¥–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏",
            "–Ω–µ–æ–±–∞–Ω–∫/BNPL",
        )
    elif smb:
        comp, integ, monet, risk, pilot = (
            "–Ω–∞–ª–æ–≥–æ–≤—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, CFDI –≤ MX)",
            "QuickBooks/Xero; –≤—ã–≥—Ä—É–∑–∫–∏ –±–∞–Ω–∫–æ–≤",
            "subscription + add-ons",
            "retention/churn",
            "—Ä–∏—Ç–µ–π–ª/HoReCa SME",
        )
    elif crypto:
        comp, integ, monet, risk, pilot = (
            "VASP/Travel Rule; custody/—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "Fireblocks/Circle; on/off-ramp",
            "—Å–ø—Ä–µ–¥/–∫–æ–º–∏—Å—Å–∏–∏",
            "—Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–µ—Ç—ã, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å",
            "–∫–æ—à–µ–ª—å–∫–∏/–Ω–µ–æ-–±—Ä–æ–∫–µ—Ä—ã",
        )
    else:
        comp, integ, monet, risk, pilot = (
            "–±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö/–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
            "REST/Webhooks; –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (Amplitude/Mixpanel)",
            "subscription / usage-based",
            "–Ω–∏–∑–∫–∞—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞—Ü–∏—è",
            "SMB-–±–∞–Ω–∫–∏–Ω–≥/ERP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏",
        )
    return comp, integ, monet, risk, pilot

def compose_message(post: dict) -> str:
    name = (post.get("name") or "").strip()
    tagline = (post.get("tagline") or "").strip()
    desc = (post.get("description") or tagline or "").strip()
    desc = re.sub(r"\s+", " ", desc)
    votes = post.get("votesCount", 0)
    comments = post.get("commentsCount", 0)
    website = post.get("website") or ""
    ph_url = f"https://www.producthunt.com/posts/{post.get('slug','')}"
    comp, integ, monet, risk, pilot = _pro_notes(post)

    why = [
        f"‚Ä¢ Killer —Ñ–∏—á–∞: {tagline or '—Ñ–æ–∫—É—Å –Ω–∞ UX/—Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞'}",
        "‚Ä¢ ICP: SMB / —Ñ–∏–Ω—Å–µ—Ä–≤",
        "‚Ä¢ Go-to-market: product-led + –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞",
    ]

    body = (
f"üöÄ –°—Ç–∞—Ä—Ç–∞–ø –¥–Ω—è: {name}\n"
f"{tagline}\n\n"
f"–ß—Ç–æ –¥–µ–ª–∞–µ—Ç (1‚Äì2 —Å—Ç—Ä–æ–∫–∏):\n"
f"{desc}\n\n"
f"–ü–æ—á–µ–º—É —ç—Ç–æ –º–æ–∂–µ—Ç ‚Äú–≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å‚Äù:\n"
f"{why[0]}\n{why[1]}\n{why[2]}\n\n"
f"Pro Notes –¥–ª—è —Ñ–∏–Ω—Ç–µ—Ö-–ø—Ä–∞–∫—Ç–∏–∫–æ–≤:\n"
f"‚Ä¢ –ö–æ–º–ø–ª–∞–µ–Ω—Å: {comp}\n"
f"‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {integ}\n"
f"‚Ä¢ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è: {monet}\n"
f"‚Ä¢ –†–∏—Å–∫–∏: {risk}\n"
f"‚Ä¢ –ì–¥–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∏–ª–æ—Ç: {pilot}\n\n"
f"–°–∏–≥–Ω–∞–ª—ã –∏–Ω—Ç–µ—Ä–µ—Å–∞:\n"
f"‚Ä¢ Product Hunt: {votes} –∞–ø–≤–æ—É—Ç–æ–≤ ¬∑ {comments} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
f"‚Ä¢ –õ–∏–Ω–∫–∏: —Å–∞–π—Ç {website} ¬∑ Product Hunt {ph_url}\n\n"
f"#fintech #payments #smb #latam"
    )
    return body[:4000]